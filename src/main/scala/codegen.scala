/*
 *  Schema to source-code converter for VL4S
 *  RW Penney, November 2017
 */

package uk.rwpenney.vl4s.gen

import java.io.{ OutputStream, PrintWriter }


trait TypeCoder {
  def typename: String
  def toCode: String
}


class EmptyCoder extends TypeCoder {
  def typename = "[EMPTY]"
  def toCode = ""
}


class BareCoder(defn: VLbareType) extends TypeCoder {
  def typename = CodeGen.mapBareTypes(defn.name)
  def toCode = ""
}


class ArrayCoder(defn: VLarrayOf) extends TypeCoder {
  val itemtype = CodeGen.toCodeable(defn.vltype).typename

  def typename = s"Seq[${itemtype}]"
  def toCode = ""
}


class EnumCoder(defn: VLenumDefn) extends TypeCoder {
  def typename = defn.name

  def toCode: String = {
    val terms = defn.values.map { term =>
      s"""|  case object ${cleanName(term)} extends ${defn.name}Enum {
          |    val term: String = "${term}" }"""
    } . mkString("\n")

    s"""sealed trait ${defn.name}Enum
    |case object ${defn.name} {
    ${terms}
    |}
    |""" . stripMargin
  }

  def cleanName(orig: String): String =
    orig.replaceAll("-", "_")
}


class AnyOfCoder(defn: VLanyOf) extends TypeCoder {
  def typename = "Any"
  def toCode = ""
}


class OperatorCoder(defn: VLopDefn) extends TypeCoder {
  def typename = CodeGen.cleanClassName(defn.name)

  val fieldTypes = defn.properties.map { prop =>
    ( prop.name, CodeGen.toCodeable(prop.vltype).typename )
  } . toMap
  val fieldNames = defn.properties.map { prop =>
    ( prop.name, CodeGen.mapReserved.getOrElse(prop.name, prop.name) )
  } . toMap

  def toCode: String = {
    val fields = defn.properties.map { prop =>
      s"    _${fieldNames(prop.name)}: ${fieldTypes(prop.name)}"
    } . mkString(",\n")

    val modifiers = defn.properties.map { prop =>
      val field = fieldNames(prop.name)
      s"  def ${field}(__arg: ${fieldTypes(prop.name)}): ${typename}" +
            s" = this.copy(_${field} = __arg)"
    } . mkString("", "\n", "\n")

    Seq(makeHelperClasses(),
        Some(s"case class ${typename}("),
        if (fields.nonEmpty) Some(s"\n${fields}") else None,
        Some(") {\n"),
        if (modifiers.nonEmpty) Some(modifiers) else None,
        Some("}\n\n")) . flatten . mkString("")
    // FIXME - extract description as scaladoc comment
  }

  def makeHelperClasses(): Option[String] = {
    val locals = defn.properties.map { prop =>
      prop.vltype match {
        case enum: VLenumDefn => Some(enum)
        case ao: VLanyOf => Some(ao)
        case _ => None
      }
    } . flatten

    // FIXME - insert actual type definition

    if (locals.nonEmpty) {
      Some(locals.map { vltype =>
        s"trait ${CodeGen.toCodeable(vltype).typename}"
        } . mkString("", "\n", "\n\n"))
    } else {
      None
    }
  }
}


class CodeGen(val stream: OutputStream) {
  def apply(schema: VLschema) {
    val pw = new PrintWriter(stream)

    val warning = "/* AUTOGENERATED by VL4S - do not edit by hand */\n"

    pw.print(warning)
    pw.print("\npackage uk.rwpenney.vl4s\n")

    schema.types.foreach { vltype =>
      val codeable = CodeGen.toCodeable(vltype)

      pw.print("\n")
      pw.print(codeable.toCode)
    }

    pw.print("\n" + warning)
    pw.close()
  }
}


object CodeGen {
  def toCodeable(vltype: VLtypeDefn): TypeCoder = {
    vltype match {
      case bare: VLbareType =>  new BareCoder(bare)
      case arr: VLarrayOf =>    new ArrayCoder(arr)
      case enum: VLenumDefn =>  new EnumCoder(enum)
      case ao: VLanyOf =>       new AnyOfCoder(ao)
      case op: VLopDefn =>      new OperatorCoder(op)
      case _ =>                 new EmptyCoder
    }
  }

  // Conversion for VL properties which class with Scala reserved words
  val mapReserved = Map(
    "type" -> "vtype"
  )

  val mapBareTypes = Map(
    "any" ->      "Any",      // FIXME - improve decoding
    "boolean" ->  "Boolean",
    "number" ->   "Double",
    "object" ->   "Any",      // FIXME - check appropriateness
    "ref" ->      "Any",      // FIXME - improve decoding
    "string" ->   "String"
  )

  def cleanClassName(orig: String): String =
    orig.map {
      case '<' => '_'
      case '>' => '_'
      case c =>   c
    }
}
